Texture2D colorMap : register(t0);
SamplerState samplerState : register(s0);

cbuffer DiffuseAmbient : register(b0)
{
	float4	AmbientDown;
	float4	AmbientRange;
	float4	DiffuseIntensity;
	float4	DiffuseDirection;
};

cbuffer MaterialProperties : register(b1)
{
	float	Ka;
	float	Kd;
	float	Ks;
	float	SpecExp;
};
struct DS_OUTPUT
{
    float4 vCSPos : SV_POSITION;
    float2 vTexCoord  : TEXCOORD0;
    float3 vNormal   : NORMAL;
	float3 vWorldPos : POSITION;
};

struct PS_OUTPUT
{
	float4 BaseColor : SV_TARGET0;
	float4 Position  : SV_TARGET1;
	float4 Normal    : SV_TARGET2;
	float4 DiffSpecCoe : SV_TARGET3;
	float4 Intensity : SV_TARGET4;
};

float4 Powf4(float4 a, float b)
{
	float4 result;
	result.x = pow(a.x, b);
	result.y = pow(a.y, b);
	result.z = pow(a.z, b);
	result.w = a.w;
	return result;
}

float4 calcAmbient(float4 normal)
{

	float up = normal.y*0.5 + 0.5;

	float4 Ambient = AmbientDown + up * AmbientRange;

	return Ambient*Ka;
}

float4 calcDiffuse(float4 normal)
{
	float4 DirToDiffuse = DiffuseDirection;
	DirToDiffuse = -DirToDiffuse;
	float  NDotL = dot(DirToDiffuse.xyz, normal.xyz);
	float4 finalInten = Kd * DiffuseIntensity * saturate(NDotL);

	return finalInten;
}

PS_OUTPUT PS_Main(DS_OUTPUT frag) : SV_TARGET
{
	PS_OUTPUT result;
	result.BaseColor = colorMap.Sample(samplerState, frag.vTexCoord);
	result.BaseColor = Powf4(result.BaseColor, 1.0 / 2.2);
	result.Position = float4(frag.vWorldPos, 1.0f);
	result.Normal = float4(frag.vNormal, 1.0f);
	result.Intensity = calcAmbient(result.Normal) + calcDiffuse(result.Normal);
	result.DiffSpecCoe.x = Kd;
	result.DiffSpecCoe.y = Ks;
	result.DiffSpecCoe.z = SpecExp;
	return result;
}
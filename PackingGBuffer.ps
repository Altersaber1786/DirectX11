Texture2D ambientMap : register(t0);
Texture2D diffuseMap : register(t1);
Texture2D specularMap : register(t2);
Texture2D normalMap : register(t3);
SamplerState samplerState : register(s0);

cbuffer DiffuseAmbient : register(b0)
{
	float4	AmbientDown;
	float4	AmbientRange;
	float4	DiffuseIntensity;
	float4	DiffuseDirection;
};

cbuffer MaterialProperties : register(b1)
{
  float Ka;
  float Kd;
  float Ks;
  float Ns;
}

struct DS_OUTPUT
{
    float4 vCSPos : SV_POSITION;
    float2 vTexCoord  : TEXCOORD0;
    float3 vNormal   : NORMAL;
	float3 vWorldPos : POSITION;
	float3 vTangent : TANGENT;
	float3 vBinormal : BINORMAL;
};

struct PS_OUTPUT
{
	float4 baseDiffAmbColor: SV_TARGET0;
	float4 DiffuseColor : SV_TARGET1;
	float4 SpecularColor : SV_TARGET2;
	float4 Position  : SV_TARGET3;
	float4 Normal    : SV_TARGET4;
};

float4 Powf4(float4 a, float b)
{
	float4 result;
	result.x = pow(a.x, b);
	result.y = pow(a.y, b);
	result.z = pow(a.z, b);
	result.w = a.w;
	return result;
}

float4 calcAmbient(float4 normal)
{

	float up = normal.y*0.5 + 0.5;

	float4 Ambient = AmbientDown + up * AmbientRange;

	return Ambient;
}

float4 calcDiffuse(float4 normal)
{
	float4 DirToDiffuse = DiffuseDirection;
	DirToDiffuse = -DirToDiffuse;
	float  NDotL = dot(DirToDiffuse.xyz, normal.xyz);
	float4 finalInten =  DiffuseIntensity * saturate(NDotL);

	return finalInten;
}

PS_OUTPUT PS_Main(DS_OUTPUT frag) : SV_TARGET
{
	PS_OUTPUT result;
	float4 ambColor = ambientMap.Sample(samplerState, frag.vTexCoord);
	float4 diffColor = diffuseMap.Sample(samplerState, frag.vTexCoord);
	result.Position = float4(frag.vWorldPos, 1.0f);
	
	float4 normalMapval = normalMap.Sample(samplerState, frag.vTexCoord);
	normalMapval = normalMapval*2.0f - 1.0f;
	float3 normalResult = frag.vTangent*normalMapval.x + frag.vBinormal*normalMapval.y + frag.vNormal*normalMapval.z;
	normalResult = normalize(normalResult);
	result.Normal = float4(normalResult, Ns);
	result.baseDiffAmbColor = diffColor*calcDiffuse(result.Normal) + ambColor*calcAmbient(result.Normal);
	result.SpecularColor = specularMap.Sample(samplerState, frag.vTexCoord);
	result.DiffuseColor = diffColor;
	
	
	return result;
}